{"version":3,"sources":["index.js","apiIndex.js","apirequest.js","isbrowser.js","http2.js","../../package.json","authplus.js","discovery.js","endpoint.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA,AGTA;AFOA,ACHA,AFMA,AGTA;AFOA,ACHA,AFMA,AGTA;AFOA,ACHA,AENA,AJYA,AGTA;AFOA,ACHA,AENA,AJYA,AGTA;AFOA,ACHA,AENA,AJYA,AGTA;AELA,AJYA,ACHA,AENA,AJYA,AGTA;AELA,AJYA,ACHA,AENA,AJYA,AGTA;AELA,AJYA,ACHA,AENA,AJYA,AGTA;AELA,AJYA,ACHA,AIZA,AFMA,AJYA,AGTA;AELA,AJYA,ACHA,AIZA,AFMA,AJYA,AGTA;AELA,AJYA,ACHA,AIZA,AFMA,AJYA,AGTA;AELA,AJYA,ACHA,AIZA,ACHA,AHSA,AJYA,AGTA;AELA,AJYA,ACHA,AIZA,ACHA,AHSA,AJYA,AGTA;AELA,AJYA,ACHA,AIZA,ACHA,AHSA,AJYA,AGTA;AELA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA,AJYA,AGTA;AELA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA,AJYA,AGTA;AELA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA,AJYA,AGTA;AELA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA,AJYA,AGTA;AELA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA,AJYA,AGTA;AELA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA,AJYA;AKdA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA,AJYA;AKdA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA,AJYA;AKdA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA;ACFA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA;ACFA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA;ACFA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA;ACFA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA;ACFA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA;ACFA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA;ACFA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA;ACFA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA;ACFA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA;ACFA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA;ACFA,AJYA,ACHA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AIZA,ACHA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;ACFA,AHSA,AKfA,ACHA,AJYA;AFOA,AKfA,ACHA,AJYA;AFOA,AKfA,ACHA,AJYA;AFOA,AKfA,ACHA,AJYA;AFOA,AKfA,ACHA,AJYA;AFOA,AKfA,ACHA,AJYA;AFOA,AKfA,ACHA,AJYA;AFOA,AKfA,ACHA,AJYA;AFOA,AKfA,ACHA,AJYA;AFOA,AKfA,AHSA;AFOA,AKfA,AHSA;AFOA,AKfA,AHSA;AFOA,AKfA,AHSA;AFOA,AKfA,AHSA;AFOA,AKfA,AHSA;AFOA,AKfA,AHSA;AFOA,AKfA,AHSA;AFOA,AKfA,AHSA;AFOA,AKfA,AHSA;AFOA,AKfA,AHSA;AFOA,AKfA,AHSA;AFOA,AKffile":"index.js","sourcesContent":["\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar google_auth_library_1 = require(\"google-auth-library\");\nObject.defineProperty(exports, \"OAuth2Client\", { enumerable: true, get: function () { return google_auth_library_1.OAuth2Client; } });\nObject.defineProperty(exports, \"JWT\", { enumerable: true, get: function () { return google_auth_library_1.JWT; } });\nObject.defineProperty(exports, \"Compute\", { enumerable: true, get: function () { return google_auth_library_1.Compute; } });\nObject.defineProperty(exports, \"UserRefreshClient\", { enumerable: true, get: function () { return google_auth_library_1.UserRefreshClient; } });\nObject.defineProperty(exports, \"DefaultTransporter\", { enumerable: true, get: function () { return google_auth_library_1.DefaultTransporter; } });\nObject.defineProperty(exports, \"GoogleAuth\", { enumerable: true, get: function () { return google_auth_library_1.GoogleAuth; } });\nvar apiIndex_1 = require(\"./apiIndex\");\nObject.defineProperty(exports, \"getAPI\", { enumerable: true, get: function () { return apiIndex_1.getAPI; } });\nvar apirequest_1 = require(\"./apirequest\");\nObject.defineProperty(exports, \"createAPIRequest\", { enumerable: true, get: function () { return apirequest_1.createAPIRequest; } });\nvar authplus_1 = require(\"./authplus\");\nObject.defineProperty(exports, \"AuthPlus\", { enumerable: true, get: function () { return authplus_1.AuthPlus; } });\nvar discovery_1 = require(\"./discovery\");\nObject.defineProperty(exports, \"Discovery\", { enumerable: true, get: function () { return discovery_1.Discovery; } });\nvar endpoint_1 = require(\"./endpoint\");\nObject.defineProperty(exports, \"Endpoint\", { enumerable: true, get: function () { return endpoint_1.Endpoint; } });\n//# sourceMappingURL=index.js.map","\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAPI = void 0;\nfunction getAPI(api, options, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nversions, context) {\n    let version;\n    if (typeof options === 'string') {\n        version = options;\n        options = {};\n    }\n    else if (typeof options === 'object') {\n        version = options.version;\n        delete options.version;\n    }\n    else {\n        throw new Error('Argument error: Accepts only string or object');\n    }\n    try {\n        const ctr = versions[version];\n        const ep = new ctr(options, context);\n        return Object.freeze(ep);\n    }\n    catch (e) {\n        throw new Error(`Unable to load endpoint ${api}(\"${version}\"): ${e.message}`);\n    }\n}\nexports.getAPI = getAPI;\n//# sourceMappingURL=apiIndex.js.map","\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createAPIRequest = void 0;\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst qs = require(\"qs\");\nconst stream = require(\"stream\");\nconst urlTemplate = require(\"url-template\");\nconst uuid = require(\"uuid\");\nconst extend = require(\"extend\");\nconst isbrowser_1 = require(\"./isbrowser\");\nconst h2 = require(\"./http2\");\nconst resolve = require(\"url\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = require('../../package.json');\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isReadableStream(obj) {\n    return (obj !== null &&\n        typeof obj === 'object' &&\n        typeof obj.pipe === 'function' &&\n        obj.readable !== false &&\n        typeof obj._read === 'function' &&\n        typeof obj._readableState === 'object');\n}\nfunction getMissingParams(params, required) {\n    const missing = new Array();\n    required.forEach(param => {\n        // Is the required param in the params object?\n        if (params[param] === undefined) {\n            missing.push(param);\n        }\n    });\n    // If there are any required params missing, return their names in array,\n    // otherwise return null\n    return missing.length > 0 ? missing : null;\n}\nfunction createAPIRequest(parameters, callback) {\n    if (callback) {\n        createAPIRequestAsync(parameters).then(r => callback(null, r), callback);\n    }\n    else {\n        return createAPIRequestAsync(parameters);\n    }\n}\nexports.createAPIRequest = createAPIRequest;\nasync function createAPIRequestAsync(parameters) {\n    var _a;\n    // Combine the GaxiosOptions options passed with this specific\n    // API call with the global options configured at the API Context\n    // level, or at the global level.\n    const options = extend(true, {}, // Ensure we don't leak settings upstream\n    ((_a = parameters.context.google) === null || _a === void 0 ? void 0 : _a._options) || {}, // Google level options\n    parameters.context._options || {}, // Per-API options\n    parameters.options // API call params\n    );\n    const params = extend(true, {}, // New base object\n    options.params, // Combined global/per-api params\n    parameters.params // API call params\n    );\n    options.userAgentDirectives = options.userAgentDirectives || [];\n    const media = params.media || {};\n    /**\n     * In a previous version of this API, the request body was stuffed in a field\n     * named `resource`.  This caused lots of problems, because it's not uncommon\n     * to have an actual named parameter required which is also named `resource`.\n     * This meant that users would have to use `resource_` in those cases, which\n     * pretty much nobody figures out on their own. The request body is now\n     * documented as being in the `requestBody` property, but we also need to keep\n     * using `resource` for reasons of back-compat. Cases that need to be covered\n     * here:\n     * - user provides just a `resource` with a request body\n     * - user provides both a `resource` and a `resource_`\n     * - user provides just a `requestBody`\n     * - user provides both a `requestBody` and a `resource`\n     */\n    let resource = params.requestBody;\n    if (!params.requestBody &&\n        params.resource &&\n        (!parameters.requiredParams.includes('resource') ||\n            typeof params.resource !== 'string')) {\n        resource = params.resource;\n        delete params.resource;\n    }\n    delete params.requestBody;\n    let authClient = params.auth || options.auth;\n    const defaultMime = typeof media.body === 'string' ? 'text/plain' : 'application/octet-stream';\n    delete params.media;\n    delete params.auth;\n    // Grab headers from user provided options\n    const headers = params.headers || {};\n    populateAPIHeader(headers);\n    delete params.headers;\n    // Un-alias parameters that were modified due to conflicts with reserved names\n    Object.keys(params).forEach(key => {\n        if (key.slice(-1) === '_') {\n            const newKey = key.slice(0, -1);\n            params[newKey] = params[key];\n            delete params[key];\n        }\n    });\n    // Check for missing required parameters in the API request\n    const missingParams = getMissingParams(params, parameters.requiredParams);\n    if (missingParams) {\n        // Some params are missing - stop further operations and inform the\n        // developer which required params are not included in the request\n        throw new Error('Missing required parameters: ' + missingParams.join(', '));\n    }\n    // Parse urls\n    if (options.url) {\n        options.url = urlTemplate.parse(options.url).expand(params);\n    }\n    if (parameters.mediaUrl) {\n        parameters.mediaUrl = urlTemplate.parse(parameters.mediaUrl).expand(params);\n    }\n    // Rewrite url if rootUrl is globally set\n    if (parameters.context._options.rootUrl !== undefined &&\n        options.url !== undefined) {\n        const path = options.url.slice(parameters.context._options.rootUrl.length);\n        options.url = resolve.resolve(parameters.context._options.rootUrl, path);\n    }\n    // When forming the querystring, override the serializer so that array\n    // values are serialized like this:\n    // myParams: ['one', 'two'] ---> 'myParams=one&myParams=two'\n    // This serializer also encodes spaces in the querystring as `%20`,\n    // whereas the default serializer in gaxios encodes to a `+`.\n    options.paramsSerializer = params => {\n        return qs.stringify(params, { arrayFormat: 'repeat' });\n    };\n    // delete path params from the params object so they do not end up in query\n    parameters.pathParams.forEach(param => delete params[param]);\n    // if authClient is actually a string, use it as an API KEY\n    if (typeof authClient === 'string') {\n        params.key = params.key || authClient;\n        authClient = undefined;\n    }\n    function multipartUpload(multipart) {\n        const boundary = uuid.v4();\n        const finale = `--${boundary}--`;\n        const rStream = new stream.PassThrough({\n            flush(callback) {\n                this.push('\\r\\n');\n                this.push(finale);\n                callback();\n            },\n        });\n        const pStream = new ProgressStream();\n        const isStream = isReadableStream(multipart[1].body);\n        headers['content-type'] = `multipart/related; boundary=${boundary}`;\n        for (const part of multipart) {\n            const preamble = `--${boundary}\\r\\ncontent-type: ${part['content-type']}\\r\\n\\r\\n`;\n            rStream.push(preamble);\n            if (typeof part.body === 'string') {\n                rStream.push(part.body);\n                rStream.push('\\r\\n');\n            }\n            else {\n                // Gaxios does not natively support onUploadProgress in node.js.\n                // Pipe through the pStream first to read the number of bytes read\n                // for the purpose of tracking progress.\n                pStream.on('progress', bytesRead => {\n                    if (options.onUploadProgress) {\n                        options.onUploadProgress({ bytesRead });\n                    }\n                });\n                part.body.pipe(pStream).pipe(rStream);\n            }\n        }\n        if (!isStream) {\n            rStream.push(finale);\n            rStream.push(null);\n        }\n        options.data = rStream;\n    }\n    function browserMultipartUpload(multipart) {\n        const boundary = uuid.v4();\n        const finale = `--${boundary}--`;\n        headers['content-type'] = `multipart/related; boundary=${boundary}`;\n        let content = '';\n        for (const part of multipart) {\n            const preamble = `--${boundary}\\r\\ncontent-type: ${part['content-type']}\\r\\n\\r\\n`;\n            content += preamble;\n            if (typeof part.body === 'string') {\n                content += part.body;\n                content += '\\r\\n';\n            }\n        }\n        content += finale;\n        options.data = content;\n    }\n    if (parameters.mediaUrl && media.body) {\n        options.url = parameters.mediaUrl;\n        if (resource) {\n            params.uploadType = 'multipart';\n            const multipart = [\n                { 'content-type': 'application/json', body: JSON.stringify(resource) },\n                {\n                    'content-type': media.mimeType || (resource && resource.mimeType) || defaultMime,\n                    body: media.body,\n                },\n            ];\n            if (!isbrowser_1.isBrowser()) {\n                // gaxios doesn't support multipart/related uploads, so it has to\n                // be implemented here.\n                multipartUpload(multipart);\n            }\n            else {\n                browserMultipartUpload(multipart);\n            }\n        }\n        else {\n            params.uploadType = 'media';\n            Object.assign(headers, { 'content-type': media.mimeType || defaultMime });\n            options.data = media.body;\n        }\n    }\n    else {\n        options.data = resource || undefined;\n    }\n    options.headers = extend(true, options.headers || {}, headers);\n    options.params = params;\n    if (!isbrowser_1.isBrowser()) {\n        options.headers['Accept-Encoding'] = 'gzip';\n        options.userAgentDirectives.push({\n            product: 'google-api-nodejs-client',\n            version: pkg.version,\n            comment: 'gzip',\n        });\n        const userAgent = options.userAgentDirectives\n            .map(d => {\n            let line = `${d.product}/${d.version}`;\n            if (d.comment) {\n                line += ` (${d.comment})`;\n            }\n            return line;\n        })\n            .join(' ');\n        options.headers['User-Agent'] = userAgent;\n    }\n    // By default gaxios treats any 2xx as valid, and all non 2xx status\n    // codes as errors.  This is a problem for HTTP 304s when used along\n    // with an eTag.\n    if (!options.validateStatus) {\n        options.validateStatus = status => {\n            return (status >= 200 && status < 300) || status === 304;\n        };\n    }\n    // Retry by default\n    options.retry = options.retry === undefined ? true : options.retry;\n    delete options.auth; // is overridden by our auth code\n    // Perform the HTTP request.  NOTE: this function used to return a\n    // mikeal/request object. Since the transition to Axios, the method is\n    // now void.  This may be a source of confusion for users upgrading from\n    // version 24.0 -> 25.0 or up.\n    if (authClient && typeof authClient === 'object') {\n        if (options.http2) {\n            const authHeaders = await authClient.getRequestHeaders(options.url);\n            const mooOpts = Object.assign({}, options);\n            mooOpts.headers = Object.assign(mooOpts.headers, authHeaders);\n            return h2.request(mooOpts);\n        }\n        else {\n            return authClient.request(options);\n        }\n    }\n    else {\n        return new google_auth_library_1.DefaultTransporter().request(options);\n    }\n}\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\nclass ProgressStream extends stream.Transform {\n    constructor() {\n        super(...arguments);\n        this.bytesRead = 0;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _transform(chunk, encoding, callback) {\n        this.bytesRead += chunk.length;\n        this.emit('progress', this.bytesRead);\n        this.push(chunk);\n        callback();\n    }\n}\nfunction populateAPIHeader(headers) {\n    // TODO: we should eventually think about adding browser support for this\n    // populating the gl-web header (web support should also be added to\n    // google-auth-library-nodejs).\n    if (!isbrowser_1.isBrowser()) {\n        headers['x-goog-api-client'] = `gdcl/${pkg.version} gl-node/${process.versions.node}`;\n    }\n}\n//# sourceMappingURL=apirequest.js.map","\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isBrowser = void 0;\nfunction isBrowser() {\n    return typeof window !== 'undefined';\n}\nexports.isBrowser = isBrowser;\n//# sourceMappingURL=isbrowser.js.map","\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.closeSession = exports.request = exports.sessions = void 0;\nconst http2 = require(\"http2\");\nconst zlib = require(\"zlib\");\nconst url_1 = require(\"url\");\nconst qs = require(\"qs\");\nconst extend = require(\"extend\");\nconst stream_1 = require(\"stream\");\nconst util = require(\"util\");\nconst process = require(\"process\");\nconst common_1 = require(\"gaxios/build/src/common\");\nconst { HTTP2_HEADER_CONTENT_ENCODING, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_STATUS, } = http2.constants;\nconst DEBUG = !!process.env.HTTP2_DEBUG;\n/**\n * List of sessions current in use.\n * @private\n */\nexports.sessions = {};\nlet warned = false;\n/**\n * Public method to make an http2 request.\n * @param config - Request options.\n */\nasync function request(config) {\n    // Make sure users know this API is unstable\n    if (!warned) {\n        const message = `\n      The HTTP/2 API in googleapis is unstable! This is an early implementation\n      that should not be used in production.  It may change in unpredictable\n      ways. Please only use this for experimentation.\n    `;\n        process.emitWarning(message, 'GOOG_HTTP2');\n        warned = true;\n    }\n    const opts = extend(true, {}, config);\n    opts.validateStatus = opts.validateStatus || validateStatus;\n    opts.responseType = opts.responseType || 'json';\n    const url = new url_1.URL(opts.url);\n    // Check for an existing session to this host, or go create a new one.\n    const sessionData = _getClient(url.host);\n    // Since we're using this session, clear the timeout handle to ensure\n    // it stays in memory and connected for a while further.\n    if (sessionData.timeoutHandle !== undefined) {\n        clearTimeout(sessionData.timeoutHandle);\n    }\n    // Assemble the querystring based on config.params.  We're using the\n    // `qs` module to make life a little easier.\n    let pathWithQs = url.pathname;\n    if (config.params && Object.keys(config.params).length > 0) {\n        const q = qs.stringify(opts.params);\n        pathWithQs += `?${q}`;\n    }\n    // Assemble the headers based on basic HTTP2 primitives (path, method) and\n    // custom headers sent from the consumer.  Note: I am using `Object.assign`\n    // here making the assumption these objects are not deep.  If it turns out\n    // they are, we may need to use the `extend` npm module for deep cloning.\n    const headers = Object.assign({}, opts.headers, {\n        [HTTP2_HEADER_PATH]: pathWithQs,\n        [HTTP2_HEADER_METHOD]: config.method || 'GET',\n    });\n    // NOTE: This is working around an upstream bug in `apirequest.ts`. The\n    // request path assumes that the `content-type` header is going to be set in\n    // the underlying HTTP Client. This hack provides bug for bug compatability\n    // with this bug in gaxios:\n    // https://github.com/googleapis/gaxios/blob/master/src/gaxios.ts#L202\n    if (!headers[HTTP2_HEADER_CONTENT_TYPE]) {\n        if (opts.responseType !== 'text') {\n            headers[HTTP2_HEADER_CONTENT_TYPE] = 'application/json';\n        }\n    }\n    const res = {\n        config,\n        request: {},\n        headers: [],\n        status: 0,\n        data: {},\n        statusText: '',\n    };\n    const chunks = [];\n    const session = sessionData.session;\n    let req;\n    return new Promise((resolve, reject) => {\n        try {\n            req = session\n                .request(headers)\n                .on('response', headers => {\n                res.headers = headers;\n                res.status = Number(headers[HTTP2_HEADER_STATUS]);\n                let stream = req;\n                if (headers[HTTP2_HEADER_CONTENT_ENCODING] === 'gzip') {\n                    stream = req.pipe(zlib.createGunzip());\n                }\n                if (opts.responseType === 'stream') {\n                    res.data = stream;\n                    resolve(res);\n                    return;\n                }\n                stream\n                    .on('data', d => {\n                    chunks.push(d);\n                })\n                    .on('error', err => {\n                    reject(err);\n                    return;\n                })\n                    .on('end', () => {\n                    const buf = Buffer.concat(chunks);\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    let data = buf;\n                    if (buf) {\n                        if (opts.responseType === 'json') {\n                            try {\n                                data = JSON.parse(buf.toString('utf8'));\n                            }\n                            catch (_a) {\n                                data = buf.toString('utf8');\n                            }\n                        }\n                        else if (opts.responseType === 'text') {\n                            data = buf.toString('utf8');\n                        }\n                        else if (opts.responseType === 'arraybuffer') {\n                            data = buf.buffer;\n                        }\n                        res.data = data;\n                    }\n                    if (!opts.validateStatus(res.status)) {\n                        let message = `Request failed with status code ${res.status}. `;\n                        if (res.data && typeof res.data === 'object') {\n                            const body = util.inspect(res.data, { depth: 5 });\n                            message = `${message}\\n'${body}`;\n                        }\n                        reject(new common_1.GaxiosError(message, opts, res));\n                    }\n                    resolve(res);\n                    return;\n                });\n            })\n                .on('error', e => {\n                reject(e);\n                return;\n            });\n        }\n        catch (e) {\n            closeSession(url);\n            reject(e);\n        }\n        res.request = req;\n        // If data was provided, write it to the request in the form of\n        // a stream, string data, or a basic object.\n        if (config.data) {\n            if (config.data instanceof stream_1.Stream) {\n                config.data.pipe(req);\n            }\n            else if (typeof config.data === 'string') {\n                const data = Buffer.from(config.data);\n                req.end(data);\n            }\n            else if (typeof config.data === 'object') {\n                const data = JSON.stringify(config.data);\n                req.end(data);\n            }\n        }\n        // Create a timeout so the Http2Session will be cleaned up after\n        // a period of non-use. 500 milliseconds was chosen because it's\n        // a nice round number, and I don't know what would be a better\n        // choice. Keeping this channel open will hold a file descriptor\n        // which will prevent the process from exiting.\n        sessionData.timeoutHandle = setTimeout(() => {\n            closeSession(url);\n        }, 500);\n    });\n}\nexports.request = request;\n/**\n * By default, throw for any non-2xx status code\n * @param status - status code from the HTTP response\n */\nfunction validateStatus(status) {\n    return status >= 200 && status < 300;\n}\n/**\n * Obtain an existing h2 session or go create a new one.\n * @param host - The hostname to which the session belongs.\n */\nfunction _getClient(host) {\n    if (!exports.sessions[host]) {\n        if (DEBUG) {\n            console.log(`Creating client for ${host}`);\n        }\n        const session = http2.connect(`https://${host}`);\n        session\n            .on('error', e => {\n            console.error(`*ERROR*: ${e}`);\n            delete exports.sessions[host];\n        })\n            .on('goaway', (errorCode, lastStreamId) => {\n            console.error(`*GOAWAY*: ${errorCode} : ${lastStreamId}`);\n            delete exports.sessions[host];\n        });\n        exports.sessions[host] = { session };\n    }\n    else {\n        if (DEBUG) {\n            console.log(`Used cached client for ${host}`);\n        }\n    }\n    return exports.sessions[host];\n}\nasync function closeSession(url) {\n    const sessionData = exports.sessions[url.host];\n    if (!sessionData) {\n        return;\n    }\n    const { session } = sessionData;\n    delete exports.sessions[url.host];\n    if (DEBUG) {\n        console.error(`Closing ${url.host}`);\n    }\n    session.close(() => {\n        if (DEBUG) {\n            console.error(`Closed ${url.host}`);\n        }\n    });\n    setTimeout(() => {\n        if (session && !session.destroyed) {\n            if (DEBUG) {\n                console.log(`Forcing close ${url.host}`);\n            }\n            if (session) {\n                session.destroy();\n            }\n        }\n    }, 1000);\n}\nexports.closeSession = closeSession;\n//# sourceMappingURL=http2.js.map","module.exports = {\n  \"_from\": \"googleapis-common@^4.4.1\",\n  \"_id\": \"googleapis-common@4.4.3\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-W46WKCk3QtlCCfmZyQIH5zxmDOyeV5Qj+qs7nr2ox08eRkEJMWp6iwv542R/PsokXaGUSrmif4vCC4+rGzRSsQ==\",\n  \"_location\": \"/googleapis-common\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"googleapis-common@^4.4.1\",\n    \"name\": \"googleapis-common\",\n    \"escapedName\": \"googleapis-common\",\n    \"rawSpec\": \"^4.4.1\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^4.4.1\"\n  },\n  \"_requiredBy\": [\n    \"/googleapis\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/googleapis-common/-/googleapis-common-4.4.3.tgz\",\n  \"_shasum\": \"a2063adf17b14501a5f426b9cb0685496d835b7d\",\n  \"_spec\": \"googleapis-common@^4.4.1\",\n  \"_where\": \"D:\\\\WeChatProjects\\\\miniprogram-4\\\\node_modules\\\\googleapis\",\n  \"author\": {\n    \"name\": \"Google LLC\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/googleapis/nodejs-googleapis-common/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"dependencies\": {\n    \"extend\": \"^3.0.2\",\n    \"gaxios\": \"^4.0.0\",\n    \"google-auth-library\": \"^6.0.0\",\n    \"qs\": \"^6.7.0\",\n    \"url-template\": \"^2.0.8\",\n    \"uuid\": \"^8.0.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"A common tooling library used by the googleapis npm module. You probably don't want to use this directly.\",\n  \"devDependencies\": {\n    \"@compodoc/compodoc\": \"^1.1.9\",\n    \"@microsoft/api-documenter\": \"^7.8.10\",\n    \"@microsoft/api-extractor\": \"^7.8.10\",\n    \"@types/execa\": \"^0.9.0\",\n    \"@types/extend\": \"^3.0.1\",\n    \"@types/mocha\": \"^8.0.0\",\n    \"@types/mv\": \"^2.1.0\",\n    \"@types/ncp\": \"^2.0.1\",\n    \"@types/nock\": \"^10.0.3\",\n    \"@types/proxyquire\": \"^1.3.28\",\n    \"@types/qs\": \"^6.5.3\",\n    \"@types/sinon\": \"^9.0.4\",\n    \"@types/tmp\": \"0.2.0\",\n    \"@types/url-template\": \"^2.0.28\",\n    \"@types/uuid\": \"^8.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"codecov\": \"^3.5.0\",\n    \"execa\": \"^4.0.0\",\n    \"gts\": \"^2.0.0\",\n    \"http2spy\": \"^2.0.0\",\n    \"is-docker\": \"^2.0.0\",\n    \"karma\": \"^5.0.0\",\n    \"karma-chrome-launcher\": \"^3.0.0\",\n    \"karma-coverage\": \"^2.0.0\",\n    \"karma-firefox-launcher\": \"^1.1.0\",\n    \"karma-mocha\": \"^2.0.0\",\n    \"karma-remap-coverage\": \"^0.1.5\",\n    \"karma-sourcemap-loader\": \"^0.3.7\",\n    \"karma-webpack\": \"^4.0.2\",\n    \"linkinator\": \"^2.0.0\",\n    \"mocha\": \"^8.0.0\",\n    \"mv\": \"^2.1.1\",\n    \"ncp\": \"^2.0.0\",\n    \"nock\": \"^13.0.0\",\n    \"null-loader\": \"^4.0.0\",\n    \"proxyquire\": \"^2.1.3\",\n    \"puppeteer\": \"^5.0.0\",\n    \"sinon\": \"^9.0.2\",\n    \"tmp\": \"^0.2.0\",\n    \"ts-loader\": \"^8.0.0\",\n    \"typescript\": \"^3.8.3\",\n    \"webpack\": \"^4.35.0\",\n    \"webpack-cli\": \"^4.0.0\"\n  },\n  \"engines\": {\n    \"node\": \">=10.10.0\"\n  },\n  \"files\": [\n    \"build/src\",\n    \"!build/src/**/*.map\"\n  ],\n  \"homepage\": \"https://github.com/googleapis/nodejs-googleapis-common#readme\",\n  \"keywords\": [],\n  \"license\": \"Apache-2.0\",\n  \"main\": \"build/src/index.js\",\n  \"name\": \"googleapis-common\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/googleapis/nodejs-googleapis-common.git\"\n  },\n  \"scripts\": {\n    \"api-documenter\": \"api-documenter yaml --input-folder=temp\",\n    \"api-extractor\": \"api-extractor run --local\",\n    \"benchmark\": \"node build/benchmark/bench.js\",\n    \"browser-test\": \"karma start\",\n    \"clean\": \"gts clean\",\n    \"compile\": \"tsc -p .\",\n    \"docs\": \"compodoc src/\",\n    \"docs-test\": \"linkinator docs\",\n    \"fix\": \"gts fix\",\n    \"lint\": \"gts check\",\n    \"prebenchmark\": \"npm run compile\",\n    \"precompile\": \"gts clean\",\n    \"predocs-test\": \"npm run docs\",\n    \"prelint\": \"cd samples; npm link ../; npm install\",\n    \"prepare\": \"npm run compile\",\n    \"presystem-test\": \"npm run compile\",\n    \"pretest\": \"npm run compile\",\n    \"samples-test\": \"mocha build/samples-test\",\n    \"system-test\": \"c8 mocha build/system-test --timeout 600000\",\n    \"test\": \"c8 mocha build/test\",\n    \"webpack\": \"webpack\"\n  },\n  \"types\": \"build/src/index.d.ts\",\n  \"version\": \"4.4.3\"\n}\n","\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthPlus = void 0;\nconst google_auth_library_1 = require(\"google-auth-library\");\nclass AuthPlus extends google_auth_library_1.GoogleAuth {\n    constructor() {\n        super(...arguments);\n        this.JWT = google_auth_library_1.JWT;\n        this.Compute = google_auth_library_1.Compute;\n        this.OAuth2 = google_auth_library_1.OAuth2Client;\n        this.GoogleAuth = google_auth_library_1.GoogleAuth;\n    }\n    /**\n     * Override getClient(), memoizing an instance of auth for\n     * subsequent calls to getProjectId().\n     */\n    async getClient(options) {\n        this._cachedAuth = new google_auth_library_1.GoogleAuth(options);\n        return this._cachedAuth.getClient();\n    }\n    getProjectId(callback) {\n        if (callback) {\n            return this._cachedAuth\n                ? this._cachedAuth.getProjectId(callback)\n                : super.getProjectId(callback);\n        }\n        else {\n            return this._cachedAuth\n                ? this._cachedAuth.getProjectId()\n                : super.getProjectId();\n        }\n    }\n}\nexports.AuthPlus = AuthPlus;\n//# sourceMappingURL=authplus.js.map","\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Discovery = void 0;\nconst fs = require(\"fs\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst resolve = require(\"url\");\nconst util = require(\"util\");\nconst apirequest_1 = require(\"./apirequest\");\nconst endpoint_1 = require(\"./endpoint\");\nconst readFile = util.promisify(fs.readFile);\nclass Discovery {\n    /**\n     * Discovery for discovering API endpoints\n     *\n     * @param options Options for discovery\n     */\n    constructor(options) {\n        this.transporter = new google_auth_library_1.DefaultTransporter();\n        this.options = options || {};\n    }\n    /**\n     * Generate and Endpoint from an endpoint schema object.\n     *\n     * @param schema The schema from which to generate the Endpoint.\n     * @return A function that creates an endpoint.\n     */\n    makeEndpoint(schema) {\n        return (options) => {\n            const ep = new endpoint_1.Endpoint(options);\n            ep.applySchema(ep, schema, schema, ep);\n            return ep;\n        };\n    }\n    /**\n     * Log output of generator. Works just like console.log\n     */\n    log(...args) {\n        if (this.options && this.options.debug) {\n            console.log(...args);\n        }\n    }\n    /**\n     * Generate all APIs and return as in-memory object.\n     * @param discoveryUrl\n     */\n    async discoverAllAPIs(discoveryUrl) {\n        const headers = this.options.includePrivate\n            ? {}\n            : { 'X-User-Ip': '0.0.0.0' };\n        const res = await this.transporter.request({\n            url: discoveryUrl,\n            headers,\n        });\n        const items = res.data.items;\n        const apis = await Promise.all(items.map(async (api) => {\n            const endpointCreator = await this.discoverAPI(api.discoveryRestUrl);\n            return { api, endpointCreator };\n        }));\n        const versionIndex = {};\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const apisIndex = {};\n        for (const set of apis) {\n            if (!apisIndex[set.api.name]) {\n                versionIndex[set.api.name] = {};\n                apisIndex[set.api.name] = (options) => {\n                    const type = typeof options;\n                    let version;\n                    if (type === 'string') {\n                        version = options;\n                        options = {};\n                    }\n                    else if (type === 'object') {\n                        version = options.version;\n                        delete options.version;\n                    }\n                    else {\n                        throw new Error('Argument error: Accepts only string or object');\n                    }\n                    try {\n                        const ep = set.endpointCreator(options, this);\n                        return Object.freeze(ep); // create new & freeze\n                    }\n                    catch (e) {\n                        throw new Error(util.format('Unable to load endpoint %s(\"%s\"): %s', set.api.name, version, e.message));\n                    }\n                };\n            }\n            versionIndex[set.api.name][set.api.version] = set.endpointCreator;\n        }\n        return apisIndex;\n    }\n    /**\n     * Generate API file given discovery URL\n     *\n     * @param apiDiscoveryUrl URL or filename of discovery doc for API\n     * @returns A promise that resolves with a function that creates the endpoint\n     */\n    async discoverAPI(apiDiscoveryUrl) {\n        if (typeof apiDiscoveryUrl === 'string') {\n            const parts = resolve.parse(apiDiscoveryUrl);\n            if (apiDiscoveryUrl && !parts.protocol) {\n                this.log('Reading from file ' + apiDiscoveryUrl);\n                const file = await readFile(apiDiscoveryUrl, { encoding: 'utf8' });\n                return this.makeEndpoint(JSON.parse(file));\n            }\n            else {\n                this.log('Requesting ' + apiDiscoveryUrl);\n                const res = await this.transporter.request({\n                    url: apiDiscoveryUrl,\n                });\n                return this.makeEndpoint(res.data);\n            }\n        }\n        else {\n            const options = apiDiscoveryUrl;\n            this.log('Requesting ' + options.url);\n            const url = options.url;\n            delete options.url;\n            const parameters = {\n                options: { url, method: 'GET' },\n                requiredParams: [],\n                pathParams: [],\n                params: options,\n                context: { google: { _options: {} }, _options: {} },\n            };\n            const res = await apirequest_1.createAPIRequest(parameters);\n            return this.makeEndpoint(res.data);\n        }\n    }\n}\nexports.Discovery = Discovery;\n//# sourceMappingURL=discovery.js.map","\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Endpoint = void 0;\nconst apirequest_1 = require(\"./apirequest\");\nclass Endpoint {\n    constructor(options) {\n        this._options = options || {};\n    }\n    /**\n     * Given a schema, add methods and resources to a target.\n     *\n     * @param {object} target The target to which to apply the schema.\n     * @param {object} rootSchema The top-level schema, so we don't lose track of it\n     * during recursion.\n     * @param {object} schema The current schema from which to extract methods and\n     * resources.\n     * @param {object} context The context to add to each method.\n     */\n    applySchema(target, rootSchema, schema, context) {\n        this.applyMethodsFromSchema(target, rootSchema, schema, context);\n        if (schema.resources) {\n            for (const resourceName in schema.resources) {\n                if (Object.prototype.hasOwnProperty.call(schema.resources, resourceName)) {\n                    const resource = schema.resources[resourceName];\n                    if (!target[resourceName]) {\n                        target[resourceName] = {};\n                    }\n                    this.applySchema(target[resourceName], rootSchema, resource, context);\n                }\n            }\n        }\n    }\n    /**\n     * Given a schema, add methods to a target.\n     *\n     * @param {object} target The target to which to apply the methods.\n     * @param {object} rootSchema The top-level schema, so we don't lose track of it\n     * during recursion.\n     * @param {object} schema The current schema from which to extract methods.\n     * @param {object} context The context to add to each method.\n     */\n    applyMethodsFromSchema(target, rootSchema, schema, context) {\n        if (schema.methods) {\n            for (const name in schema.methods) {\n                if (Object.prototype.hasOwnProperty.call(schema.methods, name)) {\n                    const method = schema.methods[name];\n                    target[name] = this.makeMethod(rootSchema, method, context);\n                }\n            }\n        }\n    }\n    /**\n     * Given a method schema, add a method to a target.\n     *\n     * @param target The target to which to add the method.\n     * @param schema The top-level schema that contains the rootUrl, etc.\n     * @param method The method schema from which to generate the method.\n     * @param context The context to add to the method.\n     */\n    makeMethod(schema, method, context) {\n        return (paramsOrCallback, callback) => {\n            const params = typeof paramsOrCallback === 'function' ? {} : paramsOrCallback;\n            callback =\n                typeof paramsOrCallback === 'function'\n                    ? paramsOrCallback\n                    : callback;\n            const schemaUrl = buildurl(schema.rootUrl + schema.servicePath + method.path);\n            const parameters = {\n                options: {\n                    url: schemaUrl.substring(1, schemaUrl.length - 1),\n                    method: method.httpMethod,\n                },\n                params,\n                requiredParams: method.parameterOrder || [],\n                pathParams: this.getPathParams(method.parameters),\n                context,\n            };\n            if (method.mediaUpload &&\n                method.mediaUpload.protocols &&\n                method.mediaUpload.protocols.simple &&\n                method.mediaUpload.protocols.simple.path) {\n                const mediaUrl = buildurl(schema.rootUrl + method.mediaUpload.protocols.simple.path);\n                parameters.mediaUrl = mediaUrl.substring(1, mediaUrl.length - 1);\n            }\n            if (!callback) {\n                return apirequest_1.createAPIRequest(parameters);\n            }\n            apirequest_1.createAPIRequest(parameters, callback);\n            return;\n        };\n    }\n    getPathParams(params) {\n        const pathParams = new Array();\n        if (typeof params !== 'object') {\n            params = {};\n        }\n        Object.keys(params).forEach(key => {\n            if (params[key].location === 'path') {\n                pathParams.push(key);\n            }\n        });\n        return pathParams;\n    }\n}\nexports.Endpoint = Endpoint;\n/**\n * Build a string used to create a URL from the discovery doc provided URL.\n * replace double slashes with single slash (except in https://)\n * @private\n * @param  input URL to build from\n * @return Resulting built URL\n */\nfunction buildurl(input) {\n    return input ? `'${input}'`.replace(/([^:]\\/)\\/+/g, '$1') : '';\n}\n//# sourceMappingURL=endpoint.js.map"]}